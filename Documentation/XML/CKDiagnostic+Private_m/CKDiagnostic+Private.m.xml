<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE header PUBLIC "-//Apple Computer//DTD HEADERDOC 1.2//EN" "/System/Library/DTDs/HeaderDoc-1.2.dtd">
<header id="//xsdoc_ref/doc/header/CKDiagnostic+Private.m" lang="occ" filename="CKDiagnostic+Private.m" headerpath="/Volumes/Brain/Documents/Development/GitHub/ClangKit/Documentation/../ClangKit/Classes/CKDiagnostic+Private.m"><name>CKDiagnostic+Private.m</name>
<includes>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/CKDiagnostic+Private.h">"CKDiagnostic+Private.h"</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/CKTranslationUnit.h">"CKTranslationUnit.h"</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/CKFixIt.h">"CKFixIt.h"</hd_link></include>
</includes>
<desc><p/></desc>
<classes><class id="//xsdoc_ref/occ/cl/CKDiagnostic" lang="occ"><name>CKDiagnostic</name>
<attributes><attribute><name>Superclass</name><value><hd_link logicalPath="//xsdoc_ref/occ/cl/end">end</hd_link></value></attribute>
</attributes>
<declaration> @<declaration_type>implementation</declaration_type> <declaration_function>CKDiagnostic</declaration_function>(
        <declaration_param>Private</declaration_param> )  - (
        <declaration_param>id</declaration_param> )<declaration_type>initWithCXDiagnostic</declaration_type>: (
        <declaration_param>CXDiagnostic</declaration_param> )<declaration_type>diagnostic</declaration_type> <declaration_type>translationUnit</declaration_type>: (
        <declaration_type>CKTranslationUnit</declaration_type> <declaration_type>*</declaration_type> )<declaration_type>translationUnit</declaration_type> { 
        <declaration_type>CXString</declaration_type> <declaration_var>spelling</declaration_var>; 
        <declaration_type>CXSourceLocation</declaration_type> <declaration_var>location</declaration_var>; 
        <declaration_type>CXSourceRange</declaration_type> <declaration_var>range</declaration_var>; 
        <declaration_keyword>unsigned</declaration_keyword> <declaration_type>int</declaration_type> <declaration_var>line</declaration_var>; 
        <declaration_keyword>unsigned</declaration_keyword> <declaration_type>int</declaration_type> <declaration_var>column</declaration_var>; 
        <declaration_keyword>unsigned</declaration_keyword> <declaration_type>int</declaration_type> <declaration_var>offset</declaration_var>;  
        <declaration_function>if</declaration_function>( (
                <declaration_type>self</declaration_type> = [ <declaration_type>self</declaration_type> <declaration_type>init</declaration_type> ] ) ) { 
            <declaration_function>if</declaration_function>( <declaration_type>diagnostic</declaration_type> == <declaration_keyword>NULL</declaration_keyword> ) { 
                [ <declaration_type>self</declaration_type> <declaration_type>release</declaration_type> ];  
                <declaration_type>return</declaration_type> <declaration_keyword>nil</declaration_keyword>; 
                        }  <declaration_type>_cxDiagnostic</declaration_type> = <declaration_var>diagnostic</declaration_var>; 
            <declaration_type>spelling</declaration_type> = <declaration_function>clang_getDiagnosticSpelling</declaration_function>(
                <declaration_param>_cxDiagnostic</declaration_param> ); 
            <declaration_type>_spelling</declaration_type> = [ [<declaration_type>NSString</declaration_type> <declaration_type>alloc</declaration_type> ] <declaration_type>initWithCString</declaration_type>: <declaration_function>clang_getCString</declaration_function>(
                    <declaration_param>spelling</declaration_param> ) <declaration_type>encoding</declaration_type>: <declaration_type>NSUTF8StringEncoding</declaration_type> ]; 
            <declaration_type>_severity</declaration_type> = <declaration_function>clang_getDiagnosticSeverity</declaration_function>(
                <declaration_param>_cxDiagnostic</declaration_param> );  
            <declaration_function>clang_disposeString</declaration_function>(
                <declaration_param>spelling</declaration_param> );  
            <declaration_type>location</declaration_type> = <declaration_function>clang_getDiagnosticLocation</declaration_function>(
                <declaration_param>diagnostic</declaration_param> ); 
            <declaration_type>range</declaration_type> = <declaration_function>clang_getDiagnosticRange</declaration_function>(
                <declaration_param>diagnostic</declaration_param>, <declaration_number>0</declaration_number> );  
            <declaration_function>clang_getExpansionLocation</declaration_function>(
                <declaration_param>location</declaration_param>,
                <declaration_type>translationUnit</declaration_type>.<declaration_param>cxFile</declaration_param>,
                &amp;<declaration_param>line</declaration_param>,
                &amp;<declaration_param>column</declaration_param>,
                &amp;<declaration_param>offset</declaration_param> );  
            <declaration_type>_line</declaration_type> = (
                <declaration_param>NSUInteger</declaration_param> )<declaration_var>line</declaration_var>; 
            <declaration_type>_column</declaration_type> = (
                <declaration_param>NSUInteger</declaration_param> )<declaration_var>column</declaration_var>; 
            <declaration_type>_range</declaration_type> = <declaration_function>NSMakeRange</declaration_function>(
                (
                    <declaration_param>NSUInteger</declaration_param> )<declaration_param>offset</declaration_param>,
                <declaration_type>range</declaration_type>.<declaration_type>end_int_data</declaration_type> - <declaration_type>range</declaration_type>.<declaration_param>begin_int_data</declaration_param> );  
            <declaration_type>_fixIts</declaration_type> = [ [ <declaration_type>CKFixIt</declaration_type> <declaration_type>fixItsForDiagnostic</declaration_type>: <declaration_type>self</declaration_type> ] <declaration_type>retain</declaration_type> ]; 
                }  <declaration_type>return</declaration_type> <declaration_var>self</declaration_var>; 
        }  @@end </declaration>
<desc><p/></desc>
<timestamp>Wednesday, May 14, 2014</timestamp>
</class></classes>
<timestamp>Wednesday, May 14, 2014</timestamp>
</header>