<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE header PUBLIC "-//Apple Computer//DTD HEADERDOC 1.2//EN" "/System/Library/DTDs/HeaderDoc-1.2.dtd">
<header id="//xsdoc_ref/doc/header/CKToken+Private.m" lang="occ" filename="CKToken+Private.m" headerpath="/Volumes/Brain/Documents/Development/GitHub/ClangKit/Documentation/../ClangKit/Classes/CKToken+Private.m"><name>CKToken+Private.m</name>
<includes>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/CKToken+Private.h">"CKToken+Private.h"</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/CKTranslationUnit.h">"CKTranslationUnit.h"</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/CKCursor.h">"CKCursor.h"</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/CKSourceLocation.h">"CKSourceLocation.h"</hd_link></include>
</includes>
<desc><p/></desc>
<classes><class id="//xsdoc_ref/occ/cl/CKToken" lang="occ"><name>CKToken</name>
<attributes><attribute><name>Superclass</name><value><hd_link logicalPath="//xsdoc_ref/occ/cl/end">end</hd_link></value></attribute>
</attributes>
<declaration> @<declaration_type>implementation</declaration_type> <declaration_function>CKToken</declaration_function>(
        <declaration_param>Private</declaration_param> )  - (
        <declaration_param>id</declaration_param> )<declaration_type>initWithCXToken</declaration_type>: (
        <declaration_param>CXToken</declaration_param> )<declaration_type>token</declaration_type> <declaration_type>translationUnit</declaration_type>: (
        <declaration_type>CKTranslationUnit</declaration_type> <declaration_type>*</declaration_type> )<declaration_type>translationUnit</declaration_type> { 
        <declaration_type>CXString</declaration_type> <declaration_var>spelling</declaration_var>; 
        <declaration_type>CXSourceRange</declaration_type> <declaration_var>range</declaration_var>; 
        <declaration_type>CXSourceLocation</declaration_type> <declaration_var>location</declaration_var>; 
        <declaration_keyword>unsigned</declaration_keyword> <declaration_type>int</declaration_type> <declaration_var>line</declaration_var>; 
        <declaration_keyword>unsigned</declaration_keyword> <declaration_type>int</declaration_type> <declaration_var>column</declaration_var>; 
        <declaration_keyword>unsigned</declaration_keyword> <declaration_type>int</declaration_type> <declaration_var>offset</declaration_var>;  
        <declaration_function>if</declaration_function>( (
                <declaration_type>self</declaration_type> = [ <declaration_type>self</declaration_type> <declaration_type>init</declaration_type> ] ) ) { 
            <declaration_type>spelling</declaration_type> = <declaration_function>clang_getTokenSpelling</declaration_function>(
                <declaration_type>translationUnit</declaration_type>.<declaration_param>cxTranslationUnit</declaration_param>,
                <declaration_param>token</declaration_param> ); 
            <declaration_type>_spelling</declaration_type> = [ [ <declaration_type>NSString</declaration_type> <declaration_type>alloc</declaration_type> ] <declaration_type>initWithCString</declaration_type>: <declaration_function>clang_getCString</declaration_function>(
                    <declaration_param>spelling</declaration_param> ) <declaration_type>encoding</declaration_type>: <declaration_type>NSUTF8StringEncoding</declaration_type> ]; 
            <declaration_type>_kind</declaration_type> = <declaration_function>clang_getTokenKind</declaration_function>(
                <declaration_param>token</declaration_param> ); 
            <declaration_type>location</declaration_type> = <declaration_function>clang_getTokenLocation</declaration_function>(
                <declaration_type>translationUnit</declaration_type>.<declaration_param>cxTranslationUnit</declaration_param>,
                <declaration_param>token</declaration_param> ); 
            <declaration_type>range</declaration_type> = <declaration_function>clang_getTokenExtent</declaration_function>(
                <declaration_type>translationUnit</declaration_type>.<declaration_param>cxTranslationUnit</declaration_param>,
                <declaration_param>token</declaration_param> );  
            <declaration_function>clang_getExpansionLocation</declaration_function>(
                <declaration_param>location</declaration_param>,
                <declaration_type>translationUnit</declaration_type>.<declaration_param>cxFile</declaration_param>,
                &amp;<declaration_param>line</declaration_param>,
                &amp;<declaration_param>column</declaration_param>,
                &amp;<declaration_param>offset</declaration_param> );  
            <declaration_type>_line</declaration_type> = (
                <declaration_param>NSUInteger</declaration_param> )<declaration_var>line</declaration_var>; 
            <declaration_type>_column</declaration_type> = (
                <declaration_param>NSUInteger</declaration_param> )<declaration_var>column</declaration_var>; 
            <declaration_type>_range</declaration_type> = <declaration_function>NSMakeRange</declaration_function>(
                (
                    <declaration_param>NSUInteger</declaration_param> )<declaration_param>offset</declaration_param>,
                <declaration_type>range</declaration_type>.<declaration_type>end_int_data</declaration_type> - <declaration_type>range</declaration_type>.<declaration_param>begin_int_data</declaration_param> ); 
            <declaration_type>_sourceLocation</declaration_type> = [ [ <declaration_type>CKSourceLocation</declaration_type> <declaration_type>alloc</declaration_type> ] <declaration_type>initWithPointerData1</declaration_type>: (
                    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type> )<declaration_type>location</declaration_type>.<declaration_type>ptr_data</declaration_type>[ <declaration_number>0</declaration_number> ] <declaration_type>pointerData2</declaration_type>: (
                    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type> )<declaration_type>location</declaration_type>.<declaration_type>ptr_data</declaration_type>[ <declaration_number>1</declaration_number> ] <declaration_type>intData</declaration_type>: <declaration_type>location</declaration_type>.<declaration_type>int_data</declaration_type> ]; 
            <declaration_type>_cursor</declaration_type> = [ [ <declaration_type>CKCursor</declaration_type> <declaration_type>alloc</declaration_type> ] <declaration_type>initWithLocation</declaration_type>: <declaration_type>_sourceLocation</declaration_type> <declaration_type>translationUnit</declaration_type>: <declaration_type>translationUnit</declaration_type> ]; 
                }  <declaration_type>return</declaration_type> <declaration_var>self</declaration_var>; 
        }  @@end </declaration>
<desc><p/></desc>
<timestamp>Wednesday, May 14, 2014</timestamp>
</class></classes>
<timestamp>Wednesday, May 14, 2014</timestamp>
</header>