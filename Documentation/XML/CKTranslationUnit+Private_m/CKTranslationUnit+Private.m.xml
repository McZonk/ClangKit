<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE header PUBLIC "-//Apple Computer//DTD HEADERDOC 1.2//EN" "/System/Library/DTDs/HeaderDoc-1.2.dtd">
<header id="//xsdoc_ref/doc/header/CKTranslationUnit+Private.m" lang="occ" filename="CKTranslationUnit+Private.m" headerpath="/Volumes/Brain/Documents/Development/GitHub/ClangKit/Documentation/../ClangKit/Classes/CKTranslationUnit+Private.m"><name>CKTranslationUnit+Private.m</name>
<includes>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/CKTranslationUnit+Private.h">"CKTranslationUnit+Private.h"</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/CKIndex.h">"CKIndex.h"</hd_link></include>
</includes>
<desc><p/></desc>
<classes><class id="//xsdoc_ref/occ/cl/CKTranslationUnit" lang="occ"><name>CKTranslationUnit</name>
<attributes><attribute><name>Superclass</name><value><hd_link logicalPath="//xsdoc_ref/occ/cl/end">end</hd_link></value></attribute>
</attributes>
<declaration> @<declaration_type>implementation</declaration_type> <declaration_function>CKTranslationUnit</declaration_function>(
        <declaration_param>Private</declaration_param> )  - (
        <declaration_param>id</declaration_param> )<declaration_type>initWithPath</declaration_type>: (
        <declaration_type>NSString</declaration_type> <declaration_type>*</declaration_type> )<declaration_type>path</declaration_type> <declaration_type>text</declaration_type>: (
        <declaration_type>NSString</declaration_type> <declaration_type>*</declaration_type> )<declaration_type>text</declaration_type> <declaration_type>index</declaration_type>: (
        <declaration_type>CKIndex</declaration_type> <declaration_type>*</declaration_type> )<declaration_type>index</declaration_type> <declaration_type>args</declaration_type>: (
        <declaration_type>NSArray</declaration_type> <declaration_type>*</declaration_type> )<declaration_type>args</declaration_type> { 
        <declaration_type>NSUInteger</declaration_type> <declaration_var>i</declaration_var>; 
        <declaration_type>id</declaration_type> <declaration_var>arg</declaration_var>;  
        <declaration_function>if</declaration_function>( (
                <declaration_type>self</declaration_type> = [ <declaration_type>self</declaration_type> <declaration_type>init</declaration_type> ] ) ) { 
            <declaration_type>_lock</declaration_type> = [ <declaration_type>NSLock</declaration_type> <declaration_type>new</declaration_type> ]; 
            <declaration_type>_path</declaration_type> = [ <declaration_type>path</declaration_type> <declaration_type>copy</declaration_type> ]; 
            <declaration_type>_index</declaration_type> = (
                <declaration_type>index</declaration_type> == <declaration_keyword>nil</declaration_keyword> ) ? [ <declaration_type>CKIndex</declaration_type> <declaration_type>new</declaration_type> ] : [ <declaration_type>index</declaration_type> <declaration_type>retain</declaration_type> ];  
            <declaration_function>if</declaration_function>( <declaration_type>text</declaration_type> == <declaration_keyword>nil</declaration_keyword> ) { 
                <declaration_type>_text</declaration_type> = [ [ <declaration_type>NSString</declaration_type> <declaration_type>stringWithContentsOfFile</declaration_type>: <declaration_type>_path</declaration_type> <declaration_type>encoding</declaration_type>: <declaration_type>NSUTF8StringEncoding</declaration_type> <declaration_type>error</declaration_type>: <declaration_keyword>NULL</declaration_keyword> ] <declaration_type>retain</declaration_type> ];  
                <declaration_function>if</declaration_function>( <declaration_type>_text</declaration_type>.<declaration_type>length</declaration_type> == <declaration_number>0</declaration_number> ) { 
                    [ <declaration_type>self</declaration_type> <declaration_type>release</declaration_type> ];  
                    <declaration_type>return</declaration_type> <declaration_keyword>nil</declaration_keyword>; 
                                } 
                        } <declaration_type>else</declaration_type> { 
                <declaration_type>_text</declaration_type> = [ <declaration_type>text</declaration_type> <declaration_type>retain</declaration_type> ]; 
                <declaration_type>_unsavedFile</declaration_type> = <declaration_function>calloc</declaration_function>(
                    <declaration_function>sizeof</declaration_function>(
                        <declaration_keyword>struct</declaration_keyword> <declaration_param>CXUnsavedFile</declaration_param> ),
                    <declaration_number>1</declaration_number> );  
                <declaration_function>if</declaration_function>( <declaration_type>_unsavedFile</declaration_type> == <declaration_keyword>NULL</declaration_keyword> ) { [ <declaration_type>self</declaration_type> <declaration_type>release</declaration_type> ];  
                    <declaration_type>return</declaration_type> <declaration_keyword>nil</declaration_keyword>; 
                                }  (
                    (
                        <declaration_keyword>struct</declaration_keyword> <declaration_type>CXUnsavedFile</declaration_type> <declaration_type>*</declaration_type> )<declaration_param>_unsavedFile</declaration_param> )-&gt;<declaration_type>Filename</declaration_type> = <declaration_type>_path</declaration_type>.<declaration_var>fileSystemRepresentation</declaration_var>; 
                (
                    (
                        <declaration_keyword>struct</declaration_keyword> <declaration_type>CXUnsavedFile</declaration_type> <declaration_type>*</declaration_type> )<declaration_param>_unsavedFile</declaration_param> )-&gt;<declaration_type>Contents</declaration_type> = <declaration_type>_text</declaration_type>.<declaration_var>UTF8String</declaration_var>; 
                (
                    (
                        <declaration_keyword>struct</declaration_keyword> <declaration_type>CXUnsavedFile</declaration_type> <declaration_type>*</declaration_type> )<declaration_param>_unsavedFile</declaration_param> )-&gt;<declaration_type>Length</declaration_type> = <declaration_type>_text</declaration_type>.<declaration_var>length</declaration_var>; 
                        }  <declaration_function>if</declaration_function>( <declaration_type>args</declaration_type>.<declaration_type>count</declaration_type> &gt; <declaration_number>0</declaration_number> ) { 
                <declaration_type>_args</declaration_type> = (
                    <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_type>*</declaration_type> )<declaration_function>calloc</declaration_function>(
                    <declaration_function>sizeof</declaration_function>(
                        <declaration_type>char</declaration_type> <declaration_type>*</declaration_type> ),
                    <declaration_type>args</declaration_type>.<declaration_param>count</declaration_param> );  
                <declaration_function>if</declaration_function>( <declaration_type>_args</declaration_type> == <declaration_keyword>NULL</declaration_keyword> ) { 
                    [ <declaration_type>self</declaration_type> <declaration_type>release</declaration_type> ];  
                    <declaration_type>return</declaration_type> <declaration_keyword>nil</declaration_keyword>; 
                                }  <declaration_type>i</declaration_type> = <declaration_number>0</declaration_number>;  
                <declaration_function>for</declaration_function>( <declaration_type>arg</declaration_type> <declaration_type>in</declaration_type> <declaration_var>args</declaration_var> ) { 
                    <declaration_function>if</declaration_function>( [ <declaration_type>arg</declaration_type> <declaration_type>isKindOfClass</declaration_type>: [ <declaration_type>NSString</declaration_type> <declaration_type>class</declaration_type> ] ] == <declaration_keyword>NO</declaration_keyword> ) { 
                        <declaration_var>continue</declaration_var>; 
                                        }  <declaration_type>_args</declaration_type>[ <declaration_type>i</declaration_type> ] = <declaration_function>calloc</declaration_function>(
                        <declaration_function>sizeof</declaration_function>(
                            <declaration_param>char</declaration_param> ),
                        <declaration_function>strlen</declaration_function>(
                            (
                                (
                                    <declaration_type>NSString</declaration_type> <declaration_type>*</declaration_type> )<declaration_param>arg</declaration_param> ).<declaration_param>UTF8String</declaration_param> ) + <declaration_number>1</declaration_number> );  
                    <declaration_function>if</declaration_function>( <declaration_type>_args</declaration_type>[ <declaration_type>i</declaration_type> ] == <declaration_keyword>NULL</declaration_keyword> ) { 
                        [ <declaration_type>self</declaration_type> <declaration_type>release</declaration_type> ];  
                        <declaration_type>return</declaration_type> <declaration_keyword>nil</declaration_keyword>; 
                                        }  <declaration_function>strlcpy</declaration_function>(
                        (
                            <declaration_type>char</declaration_type> <declaration_type>*</declaration_type> )<declaration_type>_args</declaration_type>[ <declaration_type>i</declaration_type> ],
                        (
                            (
                                <declaration_type>NSString</declaration_type> <declaration_type>*</declaration_type> )<declaration_param>arg</declaration_param> ).<declaration_param>UTF8String</declaration_param>,
                        <declaration_function>strlen</declaration_function>(
                            (
                                (
                                    <declaration_type>NSString</declaration_type> <declaration_type>*</declaration_type> )<declaration_param>arg</declaration_param> ).<declaration_param>UTF8String</declaration_param> ) + <declaration_number>1</declaration_number> );  
                    <declaration_type>i</declaration_type>++;  
                    <declaration_type>_numArgs</declaration_type> = (
                        <declaration_param>int</declaration_param> )<declaration_var>i</declaration_var>; 
                                } 
                        }  <declaration_type>_cxTranslationUnit</declaration_type> = <declaration_function>clang_parseTranslationUnit</declaration_function> ( 
                <declaration_type>_index</declaration_type>.<declaration_param>cxIndex</declaration_param>, 
                <declaration_type>_path</declaration_type>.<declaration_param>fileSystemRepresentation</declaration_param>, 
                (
                    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type> <declaration_keyword>const</declaration_keyword> <declaration_type>*</declaration_type> )<declaration_param>_args</declaration_param>, 
                <declaration_param>_numArgs</declaration_param>, 
                <declaration_param>_unsavedFile</declaration_param>, 
                (
                    <declaration_type>_unsavedFile</declaration_type> == <declaration_keyword>NULL</declaration_keyword> ) ? <declaration_number>0</declaration_number> : <declaration_number>1</declaration_number>, 
                <declaration_function>clang_defaultEditingTranslationUnitOptions</declaration_function>() | <declaration_type>CXTranslationUnit_DetailedPreprocessingRecord</declaration_type> | <declaration_type>CXTranslationUnit_PrecompiledPreamble</declaration_type> | <declaration_type>CXTranslationUnit_CacheCompletionResults</declaration_type> | <declaration_param>CXTranslationUnit_Incomplete</declaration_param> );  
            <declaration_function>if</declaration_function>( <declaration_type>_cxTranslationUnit</declaration_type> == <declaration_keyword>NULL</declaration_keyword> ) { 
                [ <declaration_type>self</declaration_type> <declaration_type>release</declaration_type> ];  
                <declaration_type>return</declaration_type> <declaration_keyword>nil</declaration_keyword>; 
                        }  [ <declaration_type>self</declaration_type> <declaration_type>tokens</declaration_type> ]; 
            [ <declaration_type>self</declaration_type> <declaration_type>diagnostics</declaration_type> ]; 
                }  <declaration_type>return</declaration_type> <declaration_var>self</declaration_var>; 
        }  @@end </declaration>
<desc><p/></desc>
<timestamp>Wednesday, May 14, 2014</timestamp>
</class></classes>
<timestamp>Wednesday, May 14, 2014</timestamp>
</header>